What is version control, and why should you care? Version control is a system
that records changes to a file or set of files over time so that you can recall
specific versions later. For the examples in this book you will use software source
code as the files being version controlled, though in reality you can do this with
nearly any type of file on a computer.
If you are a graphic or web designer and want to keep every version of an image
or layout (which you would most certainly want to), a Version Control System
(VCS) is a very wise thing to use. It allows you to revert files back to a previous
state, revert the entire project back to a previous state, compare changes over
time, see who last modified something that might be causing a problem, who
introduced an issue and when, and more. Using a VCS also generally means that
if you screw things up or lose files, you can easily recover. In addition, you get
all this for very little overhead.
Many people’s version-control method of choice is to copy files into another
directory (perhaps a time-stamped directory, if they’re clever). This approach is
very common because it is so simple, but it is also incredibly error prone. It is
easy to forget which directory you’re in and accidentally write to the wrong file
or copy over files you don’t mean to.
To deal with this issue, programmers long ago developed local VCSs that had
a simple database that kept all the changes to files under revision control (see
One of the more popular VCS tools was a system called rcs, which is still
distributed with many computers today. Even the popular Mac OS X operating
system includes the rcs command when you install the Developer Tools. This
tool basically works by keeping patch sets (that is, the differences between files)
from one change to another in a special format on disk; it can then re-create
what any file looked like at any point in time by adding up all the patches.
The next major issue that people encounter is that they need to collaborate
with developers on other systems. To deal with this problem, Centralized Version
Control Systems (CVCSs) were developed. These systems, such as CVS, Subversion,
and Perforce, have a single server that contains all the versioned files, and
a number of clients that check out files from that central place. For many years,
this has been the standard for version control (see